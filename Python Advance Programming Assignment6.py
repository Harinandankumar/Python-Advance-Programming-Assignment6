#!/usr/bin/env python
# coding: utf-8

# 1. You are given two strings s and t. String t is generated by randomly
# shuffling string s and then adding one more letter at a random position.
# Return the letter that was added to t.
# Examples
# find_the_difference(&quot;abcd&quot;, &quot;abcde&quot;) ➞ &quot;e&quot;
# find_the_difference(&quot;&quot;, &quot;y&quot;) ➞ &quot;y&quot;
# find_the_difference(&quot;ae&quot;, &quot;aea&quot;) ➞ &quot;a&quot;
# 
# 
# 
# 
# 
# 
# 
# 
# Ans:-

# In[1]:


def find_the_difference(in_one,in_two):
    in_two_temp = list(in_two)
    for ele in in_one:
        if ele in in_two_temp:
            in_two_temp.pop(in_two_temp.index(ele))
    output = ','.join(in_two_temp)
    print(f'find_the_difference{in_one,in_two} ➞ {output}')

find_the_difference("abcd", "abcde")
find_the_difference("", "y")
find_the_difference("ae", "aea")


# 2. Given a function that accepts unlimited arguments, check and count how
# many data types are in those arguments. Finally return the total in a list.
# List order is:
# [int, str, bool, list, tuple, dictionary]
# Examples
# count_datatypes(1, 45, &quot;Hi&quot;, False) ➞ [2, 1, 1, 0, 0, 0]
# count_datatypes([10, 20], (&quot;t&quot;, &quot;Ok&quot;), 2, 3, 1) ➞ [3, 0, 0, 1, 1, 0]
# count_datatypes(&quot;Hello&quot;, &quot;Bye&quot;, True, True, False, {&quot;1&quot;: &quot;One&quot;, &quot;2&quot;: &quot;Two&quot;}, [1,
# 3], {&quot;Brayan&quot;: 18}, 25, 23) ➞ [2, 2, 3, 1, 0, 2]
# count_datatypes(4, 21, (&quot;ES&quot;, &quot;EN&quot;), (&quot;a&quot;, &quot;b&quot;), False, [1, 2, 3], [4, 5, 6]) ➞ [2,
# 0, 1, 2, 2, 0]
# 
# 
# 
# 
# 
# 
# 
# 
# Ans:-

# In[2]:


from collections import OrderedDict
def count_datatypes(*args):
    output = OrderedDict({'int':0,'str':0,'bool':0,'list':0,'tuple':0,'dict':0})
    for ele in args:
        output[type(ele).__name__] += 1
    print(f'count_datatypes{args}  ➞  {list(output.values())}')
    
count_datatypes(1, 45, "Hi", False)   
count_datatypes([10, 20], ("t", "Ok"), 2, 3, 1)
count_datatypes("Hello", "Bye", True, True, False, {"1": "One", "2": "Two"}, [1, 3], {"Brayan": 18}, 25, 23)
count_datatypes(4, 21, ("ES", "EN"), ("a", "b"), False, [1, 2, 3], [4, 5, 6])


# 3. A Fibonacci string is a precedence of the Fibonacci series. It works with
# any two characters of the English alphabet (as opposed to the numbers 0 and
# 1 in the Fibonacci series) as the initial items and concatenates them together
# as it progresses in a similar fashion as the Fibonacci series.
# Examples
# fib_str(3, [&quot;j&quot;, &quot;h&quot;]) ➞ &quot;j, h, hj&quot;
# fib_str(5, [&quot;e&quot;, &quot;a&quot;]) ➞ &quot;e, a, ae, aea, aeaae&quot;
# fib_str(6, [&quot;n&quot;, &quot;k&quot;]) ➞ &quot;n, k, kn, knk, knkkn, knkknknk&quot;
# 
# 
# 
# 
# 
# 
# 
# Ans:-

# In[3]:


# Approach 1 Using Lists
def fib_str_one(in_num,in_list):
    out_list = in_list.copy()
    if in_num > 2:
        for ele in range(2,in_num):
            out_list.append(out_list[-1]+out_list[-2])
    print(f'fib_str_one{in_num, in_list} ➞ {", ".join(out_list)}')

# Approach 2 Without Using Lists
def fib_str_two(in_num,in_list):
    back_one, back_two = in_list[-1],in_list[-2]
    output=", ".join(in_list)
    if in_num > 2:
        for ele in range(2,in_num):
            temp = back_one+back_two
            output += ", "+temp
            back_one = back_two
            back_two = temp
    print(f'fib_str_two{in_num, in_list} ➞ {output}')
    
fib_str_one(3, ["j", "h"]) 
fib_str_one(5, ["e", "a"])
fib_str_one(6, ["n", "k"])
print()
fib_str_two(3, ["j", "h"]) 
fib_str_two(5, ["e", "a"])
fib_str_two(6, ["n", "k"])


# 4. Given an integer between 0 and 26, make a variable (self.answer). That
# variable would be assigned to a string in this format:
# &quot;nines:your answer, threes:your answer, ones:your answer&quot;
# You need to find out how many ones, threes, and nines it would at least take
# for the number of each to add up to the given integer when multiplied by one,
# three or nine (depends).
# Examples
# ones_threes_nines(10) ➞ &quot;nines:1, threes:0, ones:1&quot;
# ones_threes_nines(15) ➞ &quot;nines:1, threes:2, ones:0&quot;
# ones_threes_nines(22) ➞ &quot;nines:2, threes:1, ones:1&quot;
#             
#             
#             
#             
#             
#             
#             
#             
# Ans:-

# In[4]:


def ones_threes_nines(in_num):
    in_num_clone = in_num
    answer = {'nines':0,'threes':0,'ones':0}
    if in_num > 0 and in_num < 26:
        while in_num != 0:
            if in_num >= 9:
                in_num -= 9
                answer['nines'] += 1
            elif in_num >= 3:
                in_num -= 3
                answer['threes'] += 1
            elif in_num >= 1:
                in_num -=1
                answer['ones'] +=1
    print(f"ones_threes_nines({in_num_clone}) ➞ \"nines:{answer['nines']}, threes:{answer['threes']}, ones:{answer['ones']}\"")
    
ones_threes_nines(10) 
ones_threes_nines(15)
ones_threes_nines(22)


# 5. The Fibonacci sequence is a classic use case for recursive functions since
# the value of the sequence at a given index is dependent on the sum of the
# last two values. However, the recursion tree created by solving the Fibonacci
# sequence recursively can grow quite fast. Therefore it can be important to
# think about the implications of running a function recursively. Depending on
# the size of n needed and the capabilities of the system in question you might
# want to take a different approach.
# Write a non-recursive function that takes an integer n and returns the
# Fibonacci sequence&#39;s value at index n.
# Examples
# fib(6) ➞ 8
# # 0 + 1 = 1, 1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8
# fib(1) ➞ 1
# fib(2) ➞ 1
# 
# 
# 
# 
# 
# 
# 
# Ans:-

# In[5]:


# Approach 1
def fib_one(in_num):
    if in_num < 1:
        print("Minimum two digits are required to generate a fibonacci sequence")
    else:
        output = [0,1]
        for ele in range(2,in_num+1):
            output.append(output[-1]+output[-2])
        print(f'fib_one({in_num}) ➞ {output[-1]}')

# Approach 2
def fib_two(in_num):
    back_one,back_two = 1,0
    for ele in range(2,in_num+1):
        temp = back_one+back_two
        back_two = back_one
        back_one = temp
    print(f'fib_two({in_num}) ➞ {back_one}')

fib_one(6)
fib_one(1)
fib_one(2)
print()
fib_two(6)
fib_two(1)
fib_two(2)

